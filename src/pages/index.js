import React, {useState, useEffect} from 'react';
import Head from 'next/head';
import {useRouter} from 'next/router';
import styles from '../styles/page.module.scss';
import Box from '@mui/material/Box';
import axios from 'axios';
import Grid from '@mui/material/Grid';
import Button from '@mui/material/Button';
import Link from '@mui/material/Link';
import TextField from '@mui/material/TextField';
import List from '@mui/material/List';
import Typography from '@mui/material/Typography';
import CircularProgress from '@mui/material/CircularProgress';
import Snackbar from '@mui/material/Snackbar';
import Alert from '@mui/material/Alert';
import Backdrop from '@mui/material/Backdrop';
import AlertTitle from '@mui/material/AlertTitle';
import {checkToken} from '../utils/checkToken';

function Index() {
    const router = useRouter();
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [snackbar, setSnackbar] = useState(false);
    const [isLogin, setIsLogin] = useState(false);
    const [isError, setIsError] = useState('');
    const [progress, setProgress] = useState(0);

    const handleCloseSnackbar = (event, reason) => {
        if (reason === 'clickaway') {
            return;
        }
        setSnackbar(false);
    };

    useEffect(() => {
        if (checkToken()) {
            setIsLogin(true);
            setTimeout(() => {
                router.push('/users');
            }, 500);
        } else {
            setIsLogin(false);
        }
    }, []);

    const handleLogin = async () => {
        setIsLoading(true);
        try {
            const response = await axios.post(
                `${process.env.NEXT_PUBLIC_API_URL}/api/login`,
                {email, password}
            );
            if (response.data.token) {
                setIsLogin(true);
                setSnackbar(true);
                localStorage.setItem('token', response.data.token);
                let percentage = 0;
                const interval = setInterval(() => {
                    percentage += 4;
                    setProgress(percentage);
                    if (percentage >= 100) {
                        clearInterval(interval);
                        router.push(`/users`);
                    }
                }, 100);
            } else {
                setIsLogin(false);
            }
        } catch (error) {
            if (error.response) {
                setIsError(error.response.data.error);
            }
            setIsLogin(false);
            setSnackbar(true);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <main>
            <Head>
                <title>Login</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="Favicon.ico" width={10} height={10}/>
            </Head>
            <Box
                sx={{
                    flexGrow: 1
                }}
                className={styles.loginBoxStyle}>
                <Grid container>
                    <Backdrop
                        sx={{
                            color: '#fff',
                            zIndex: (theme) => theme.zIndex.drawer + 1
                        }}
                        open={isLogin}>
                        <CircularProgress
                            color="inherit"
                            variant="determinate"
                            value={progress}
                            size={70}
                            sx={{
                                position: 'relative',
                                '&::after' : {
                                    position: 'absolute',
                                    top: '50%',
                                    left: '50%',
                                    transform: 'translate(-50%, -50%)'
                                }
                            }}/>
                        <Typography
                            variant="caption"
                            sx={{
                                position: 'absolute',
                                top: '50%',
                                left: '50%',
                                transform: 'translate(-50%, -50%)'
                            }}>
                            {`${Math.round(progress)}%`}
                        </Typography>
                    </Backdrop>
                    <Grid item xs={7}>
                        <Box className={styles.textLoginStyle}>
                            <Typography className={styles.titleLoginStyle}>
                                Lorem Ipsum
                            </Typography>
                            <Typography className={styles.subtitleLoginStyle}>
                                Lorem ipsum dolor sit amet, consectetur adipiscing elit.
                            </Typography>
                        </Box>
                    </Grid>
                    <Grid item xs={5}>
                        <Box component="form" className={styles.loginBoxInputStyle}>
                            <TextField
                                label="Email"
                                type="email"
                                value={email}
                                onChange={(e) => setEmail(e.target.value)}
                                variant="outlined"
                                className={styles.loginEmailStyle}/>
                            <TextField
                                label="Password"
                                type="password"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                                variant="outlined"
                                className={styles.loginPasswordStyle}/>
                            <List>
                                <Button
                                    onClick={handleLogin}
                                    variant="contained"
                                    className={styles.loginButtonStyle}>
                                    {
                                        isLoading
                                            ? (<CircularProgress color="inherit" size={22}/>)
                                            : ('Login')
                                    }
                                </Button>
                                <Link href="#" underline="none" className={styles.forgotPasswordStyle}>
                                    Forgot Password ?
                                </Link>
                            </List>
                            <Snackbar open={snackbar} autoHideDuration={3000} onClose={handleCloseSnackbar}>
                                <Alert
                                    onClose={handleCloseSnackbar}
                                    severity={isLogin
                                        ? "success"
                                        : "error"}
                                    variant="filled"
                                    sx={{
                                        width: '40vh'
                                    }}>
                                    <AlertTitle>{
                                            isLogin
                                                ? "Success"
                                                : "Error"
                                        }</AlertTitle>
                                    {
                                        isLogin
                                            ? ("Login Succes.")
                                            : (
                                                isError
                                                    ? isError
                                                    : "Something Wrong."
                                            )
                                    }
                                </Alert>
                            </Snackbar>
                        </Box>
                    </Grid>
                </Grid>
            </Box>
        </main>
    );
}

export default Index;
